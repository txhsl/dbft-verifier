package verifier

import (
	"bytes"
	"encoding/json"
	"net/http"
	"strconv"
	"testing"

	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/require"
)

func TestVerifyV0(t *testing.T) {
	parent := new(types.Header)
	err := parent.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x1",
			"extraData": "0x000fa7e10abc3b4c9dc768f0fa0a043feb987e21772952f909b98424f1e99f641212951c350ea78a0c4ea2a4697d40247c8be1f2b9ffa03a0e92dcbacca2617fcd447e2932857696c707055f517bbdb2eaa51fe05b0183d01607bf48c1718d1168a1c11171cbbeca26e89011e32ba25610520b20741b809007d10f47396dc6c76ad53546158751582d3e2683ef120f17ca9a284e245123266794e84a9b7837c063efbabb9fa0493bdfef639b4c1bd435671bdc994e3fcb1a49215724846df81dfb053aef81546c09ab9716b5a3004a14579ed10f83daa2bde98917c2ece6a96e44751d09c5d6ae3b142d97896b60386fa6e124fee91bad6db620706e0e7c2c8c164b18b5aca96e6e92e74dfed9c90112634ee0f5e3ac574e6b9d448e63049c21be1918888e0281d125a65be23a64d478af4e920eb98b127ce558210d82617e220cadf53718fc96a4f8c978d9a9f3f500005eb0a3d3d6891e93eea2c265586da39bbaa37340f1314adccb7b412e8bc590518ad65d82ed5e25683e0482f4658918244625dfedff1dce99ec68ea548cdf3a0078034253bd9182d011eeab022da45dd9d92e031655a6f0c16215674496762bd540ccc5e684f92651df31e8233a9b4206b002157a45999d1bc85f13c3dfc11a0800",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x5651954a9691194b40ec6fa173a7f7d2ca86c4b30c6dd1af331eaeee079c1e78",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x229c4ebaddc5f4824218d2ec9839f61e984ada15408b8c304a8fbde45a9d12fa",
			"nonce": "0x0000000000000002",
			"number": "0x11",
			"parentHash": "0x8f19bb26cf4e2f3f19a0cb2ad318a3539419c8a1fec46b14ba46a68e6514f085",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x3f9",
			"stateRoot": "0xdb2f7ede2ec991c786df6ac4672817f1608b4893484238d06da8a2278924e8e9",
			"timestamp": "0x668fb56c",
			"totalDifficulty": "0x1d",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	current := new(types.Header)
	err = current.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x000fa7e10abc3b4c9dc768f0fa0a043feb987e21772952f909b98424f1e99f641212951c350ea78a0c4ea2a4697d40247c8be1f2b9ffa03a0e92dcbacca2617fcd447e2932857696c707055f517bbdb2eaa51fe05b0183d01607bf48c1718d1168a1c11171cbbeca26e89011e32ba25610520b20741b809007d10f47396dc6c76ad53546158751582d3e2683ef328f82d2587fb1e58e3cb5fdc1b789f15b4acd6101458614b2f13ab5c822eede4e21a3d265868692073432ad9df7a902a2bf2088721999aad8dddc39e853de6c0110bca64701039749bcb404bc1c1f42efa38975507a7c94316acb681b6776064067918c3c98d340ffa623d509209a42bfc199b7d8a117f6ee007dc458199ecc4b0016d999c0420fcf9df7da68a60e6b82a0c8af62386b538265eb2e589e8bc9a553004700c2d4bd1cf4291390c369ad1dd94d0cbbf271b3c206de1fe9086df359e300c33ce941969e864b1d36434248bc96ce24cb5ab75e48daa3a1a64cb927a3326f0b5546d4d5b813b56b4aee42f32b06703db5b6734da5eb575ef0e33a9fcbd0a800687fb01563327200cc68921d349e6ec8a9c04a5b33729bb51a32077dabd85b5274ae9bf95799318e5fc3e566709a5c65b96a5566c3bec4626f9087320886a97501",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x69d097c89f2f94f33640e8689ecb3b4715fcfca44a16f8c6710c0d29a47e01b1",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x229c4ebaddc5f4824218d2ec9839f61e984ada15408b8c304a8fbde45a9d12fa",
			"nonce": "0x0000000000000004",
			"number": "0x12",
			"parentHash": "0x5651954a9691194b40ec6fa173a7f7d2ca86c4b30c6dd1af331eaeee079c1e78",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x3f9",
			"stateRoot": "0xdb2f7ede2ec991c786df6ac4672817f1608b4893484238d06da8a2278924e8e9",
			"timestamp": "0x668fb5a9",
			"totalDifficulty": "0x1f",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	require.Equal(t, true, VerifyUpdateHeader(parent, current))
}

func TestVerifyV1(t *testing.T) {
	parent := new(types.Header)
	err := parent.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0101072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76a5b5119bdcba3022c77f07b13bea98239781492b075fb8a1dff6895377dcd5251c3134660c973244d84101814ad14fa9a6605298b06a5c70c969ee5c1357236cbe9b7b65ee59f567e95d6a8fe0966175676170c0ecf174ef6ad701574d7b7d1a099068d29ac7662e20a2ae74898d19b93966d89314946745860d47c59c38208f83b50013414845cb5706840426f45b2c",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0xecd8bd1c514fd33d9e01184783af6f2dd58f3a213b294fe8019aab5271140633",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0xc1a8ea569ae7daff411094c088d4dd58cd439d241d9c31af61a537c6505761a5",
			"nonce": "0x0000000000000005",
			"number": "0x2970d9",
			"parentHash": "0x59db04b079ab47dde8736b231469db4e4a1ca2c9fc8e251bf41cf3c336facefe",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x2db",
			"stateRoot": "0xf675a08553de3363c8abc70879a9cc6ca6c6be517ae21a7f6601835fb6181ff9",
			"timestamp": "0x680b3b51",
			"totalDifficulty": "0x5023a5",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	current := new(types.Header)
	err = current.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0101072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76a5b5119bdcba3022c77f07b13bea98239781492b075fb8a1dff6895377dcd5251c3134660c973244d84101814ad14fa9a2267aebbca32f4f307ffe32c1d387b78585335d413747522953d7eccdfdb54fec71d9c8d28ce456ce51fadbf3dd059a15c42c964250c71107c987966a23d49f086cadf981f812d8deab403047cd8b8438fc8ca79cb6ee9290b3780f80007838",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x72273a91d87952260ff37c86839d69d1e1b6d3bbfc6e00a55198950bbcf182dc",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0xc1a8ea569ae7daff411094c088d4dd58cd439d241d9c31af61a537c6505761a5",
			"nonce": "0x0000000000000006",
			"number": "0x2970da",
			"parentHash": "0xecd8bd1c514fd33d9e01184783af6f2dd58f3a213b294fe8019aab5271140633",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x2db",
			"stateRoot": "0xf675a08553de3363c8abc70879a9cc6ca6c6be517ae21a7f6601835fb6181ff9",
			"timestamp": "0x680b3b56",
			"totalDifficulty": "0x5023a7",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	require.Equal(t, true, VerifyUpdateHeader(parent, current))
}

func TestVerifyV0ToV1(t *testing.T) {
	// Fork-2 => fork-1
	parent := new(types.Header)
	err := parent.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0005f1167317c9274fec85d557c0adb57f318a3a54379ddafffaa57d87e4ccfb8c72015c1dd105a30e77c6a598e577a507288b14d6aa976776f519b9747de5b7c69b344bb4e75a39442594753ab1c6707884a32405966791d077811d4e9f21b43b1e7dd911aea4d663a7a67849056c72e5f1612f67c5f3bc55d7831da24b63a0b16423fb178e6fb6799b82d2b0b60ee85e83fbf509526e9ae59de5b9d91882f9ffe9e0df4ab630169a5673f46d37619c6e3869347ddb7bf7519505aefbcad4b5de877c1cfa00dc64b9c08d10e7006cdd2de71f0d7d1aae2e1530b5b09fd6389acaa919cdf7c8a2c48b6f98e3979a2f96e15c5cb2f0e1084b14e42ff9b609325ad4221644c9a6edebf0ce7eae781b015742227f9792bf87543e52a0cdab841705ffd793cdacb82e40670dce152b10987d8f7e45e16b6654d227d19c8a33ba7e9a563c1fa3ba21893f504f1e0f9a972c01ec1e9f992bd66d4b7be4d2cc6d70037a8eddd023a12e6f87b8dc683cbbb47d2870fb501fe0fbe59f04193fe88bf891529041552b4516403bc4a4af2809e00e5a00dc5daea7bd28f74ebd9ad8ac5cd8eeac8b4e3522566db99e7a447d84b4dae0e30a6c4bff47cd0d72e7397c565006c4ddd732e496825fc7110bbe8c4a290da66400",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0xe545cf182f2815ef9dd6cfe37c26f0adaec00e5587138aca20358a344b5e7192",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76",
			"nonce": "0x0000000000000003",
			"number": "0x1fdc3e",
			"parentHash": "0x8ed2e21419be072e4ade7a0cedf79071a9b57f7124ae9829829bb7e5da8f9ec5",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x3fc",
			"stateRoot": "0xf31b6fb9c4a56b3f941068f96d529631e57849f8d3b64a049eceb6cfb501ccb6",
			"timestamp": "0x67d99abf",
			"totalDifficulty": "0x3d0760",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	current := new(types.Header)
	err = current.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0100072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f7605f1167317c9274fec85d557c0adb57f318a3a54379ddafffaa57d87e4ccfb8c72015c1dd105a30e77c6a598e577a507288b14d6aa976776f519b9747de5b7c69b344bb4e75a39442594753ab1c6707884a32405966791d077811d4e9f21b43b1e7dd911aea4d663a7a67849056c72e5f1612f67c5f3bc55d7831da24b63a0b16423fb178e6fb6799b82d2b0e50ba0174f7854611c1a3d0737e1cb8cd6cd3d3472fc40827b274b4d084cb59e09ab003b2b36dc26ceaefe3ca7c22b798946448741dfb0bb9b64e34c81139b2501b9f7a16dee9004e3fa53e4001eae2c96cc3be318b9cd2384ddc580f6dcffa80c7c52927cae0f95a603149759229711523fde26b86eb822fa8ca7f2044a0bdc150090643c8eb50e87e578b7171d1e45001e9e4f3569f688ea9f9752f5e9500fe7ae44cfd498e4d9fee245141ec30cc0971a3896d2a540992e074804b0ff309e43200191900caf1e54e1ef65302dab91206f3f7f3381f81d152fb10d4dd666d07313cf2dd763a5dd941cab202e8daf351e4b80599eaea8ef5e319a97676849c93038cc01e53fc6f5a583ea549ff078d11a852bb0599b2dfae9678bf2d2ea4011b28ca429651243976a53ac578ba509d7ba83ce69da64f2db5e60aac269bbdc2f082ec39100",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x903fb10079ec494329efcd8aa4905f6741c20bfb56324c01d75a44cc74135170",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x54a26e04c2f84197d5041ff281cd420fc69e6641391643d0399605896edd7dd5",
			"nonce": "0x0000000000000004",
			"number": "0x1fdc3f",
			"parentHash": "0xe545cf182f2815ef9dd6cfe37c26f0adaec00e5587138aca20358a344b5e7192",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x41d",
			"stateRoot": "0xf31b6fb9c4a56b3f941068f96d529631e57849f8d3b64a049eceb6cfb501ccb6",
			"timestamp": "0x67d99ac5",
			"totalDifficulty": "0x3d0762",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	require.Equal(t, true, VerifyUpdateHeader(parent, current))

	// Fork-1 => fork
	parent = current
	require.NoError(t, err)
	current = new(types.Header)
	err = current.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0101072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76b35589cdf498cfaf4559e1ea0a91f0026afdbab42279172cb9d2452e5ac021860edd210dc463c8209ee6b5539be93406a40405799c1bbbfb604b3bf586d904bff4a3efdc3026e9ed2a14f23571fd6bf3736a433c4831dd1b4f34b3a2a65d59e40397f299801947efea53f9986649bec690db898bdc6a9fb1e8dc60a670335fa53752882d76a608a4b040d41dac24ba2a",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0xb66128fde4cb0fbf1ddf7366d9888b2944fa333bb3ccb6cdd9ee5ef9e6e7b86c",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x54a26e04c2f84197d5041ff281cd420fc69e6641391643d0399605896edd7dd5",
			"nonce": "0x0000000000000005",
			"number": "0x1fdc40",
			"parentHash": "0x903fb10079ec494329efcd8aa4905f6741c20bfb56324c01d75a44cc74135170",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x2db",
			"stateRoot": "0xf31b6fb9c4a56b3f941068f96d529631e57849f8d3b64a049eceb6cfb501ccb6",
			"timestamp": "0x67d99aca",
			"totalDifficulty": "0x3d0764",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	require.Equal(t, true, VerifyUpdateHeader(parent, current))
}

func TestVerifyV2(t *testing.T) {
	parent := new(types.Header)
	err := parent.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0201072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76976d77c5cdebcce0c6e39cdd29d21ac54ad911720cf7fd28d7806515816587b95c6fc14588d93c564bd46ade8affac53aa75d3d4d2abcbc7363ead5d7ada2e9e2de20a40c8d78d440f23f36bd82638cad0039ce46bcfc86c380b643ed9ae38a801d9097e699a9b30306289388bedbc50fabb3633ec8e9d8596c5800d0dc6f3859c766170fb406915574fa81827a0c3d6",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x70b8d2a8371cf83d94012459876d326fe236141ea2d8c04ccaa7ba5d4dad19a4",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x8ff779018b306c26cf13c12aa70002ecb98e553f725049d81bfca73ca5141ec9",
			"nonce": "0x0000000000000002",
			"number": "0x3aac81",
			"parentHash": "0xa71dba8853d9a78570c223273b1baa54f1940da2ab6c65cec4a8e055b18a9e91",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x2db",
			"stateRoot": "0x73fa78a8689580ed7319392cb2f9d062acece70f938f9b9af6578e15c6ee4aeb",
			"timestamp": "0x6862306b",
			"totalDifficulty": "0x729861",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	current := new(types.Header)
	err = current.UnmarshalJSON([]byte(
		`{
			"baseFeePerGas": "0x4a817c800",
			"difficulty": "0x2",
			"extraData": "0x0201072bc064323344cba6d63cad4ca88afbea585fc612919e3e351f457ea3704f76976d77c5cdebcce0c6e39cdd29d21ac54ad911720cf7fd28d7806515816587b95c6fc14588d93c564bd46ade8affac53b509b7477d85c870d635371a054713ecff352b98261bac920963a7891d86537c8f3ea9f37ebf9bc7a325129f4b9bc47e064bd1ae1f588f62df3613b81c50680d81d7a754262d4027919c827834ce3676997a15b4adea6b387171afb7c65a13a8",
			"gasLimit": "0x1c9c380",
			"gasUsed": "0x0",
			"hash": "0x5ee3e44dbf6a87b798534efb870f63957c2d5b2ccda1b7360ea0159a403e738b",
			"logsBloom": "0x
			"miner": "0x1212000000000000000000000000000000000003",
			"mixHash": "0x8ff779018b306c26cf13c12aa70002ecb98e553f725049d81bfca73ca5141ec9",
			"nonce": "0x0000000000000003",
			"number": "0x3aac82",
			"parentHash": "0x70b8d2a8371cf83d94012459876d326fe236141ea2d8c04ccaa7ba5d4dad19a4",
			"receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
			"size": "0x2db",
			"stateRoot": "0x73fa78a8689580ed7319392cb2f9d062acece70f938f9b9af6578e15c6ee4aeb",
			"timestamp": "0x68623070",
			"totalDifficulty": "0x729863",
			"transactions": [],
			"transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			"uncles": [],
			"withdrawals": [],
			"withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
		}`,
	))
	require.NoError(t, err)
	require.Equal(t, true, VerifyUpdateHeader(parent, current))
}

func BenchmarkVerify(b *testing.B) {
	var parent *types.Header
	var current *types.Header
	for i := 0; i < 1000; i++ {
		req := map[string]interface{}{
			"id":      0,
			"jsonrpc": "2.0",
			"method":  "eth_getBlockByNumber",
			"params":  []interface{}{"0x" + strconv.FormatInt(int64(i), 16), false},
		}
		reqBody, _ := json.Marshal(req)
		resp, err := http.Post("https://neoxt4seed5.ngd.network", "application/json", bytes.NewReader(reqBody))
		require.NoError(b, err)

		defer resp.Body.Close()
		require.NoError(b, err)
		var temp map[string]interface{}
		err = json.NewDecoder(resp.Body).Decode(&temp)
		require.NoError(b, err)

		parent = current
		header, err := json.Marshal(temp["result"])
		require.NoError(b, err)
		current = new(types.Header)
		current.UnmarshalJSON(header)

		if i > 0 {
			require.Equal(b, true, VerifyUpdateHeader(parent, current))
		}
	}
}
